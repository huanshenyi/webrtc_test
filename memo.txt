# mediaのstreamを記録するapi
MediaRecorder

# 基本操作
var mediaRecorder = new MediaRecorder(stream,[options]);

#パラメータ
stream  -->getUserMedia,<video>,<audio>,<canvas>から取得
options 制限

#  
mimeType 

#Api
MediaRecorder.start(timeslice)
  # timesliceは選択可能なパラメータ,使用すれば、決めた時間ごとにデータが保存される
MediaRecorder.stop()
  #
MediaRecorder.pause
  # 一時停止
MediaRecorder.resume()
  # 再開
MediaRecorder.isTypeSupportted()
  # 対応するタイプをみる

# 事件
MediaRecorder.ondataavailable
  # データ記録するたびに発動する、もしtimeslice設定してなければ、記録止まったら、発動する

=================================================================================  
# 画面共有
  # getDisplayMedia
var promise = navigator.mediaDevices.getDisplayMedia(constraints);

   # constraints 任意ライブラリ
   constraintsはgetUserMedia函数のパラメータと同じ
   chrome://flags

====================================================================================
# socket.IO

# 送信 
socket.emit()

# あるルーム内のユーザーに送信
io.in(room).emit()

# 自分以外のあるルーム内のユーザーにメッセージ
socket.to(room).emit()

# 自分以外のすべてのユーザーにメッセージ
socket.broadcast.emit()

#メッセージ受けること
socket.on('msg',function(data){...})

# 二つのデータが存在するメッセージを受ける
socket.on('msg',function(data1,data2){...})

# emitのfuncに返り値を処理する方法が用意された
S:socket.emit('action',data,function(arg1,arg2){...});
C:socket.on('action',function(data,fn){fn('a','b');});
